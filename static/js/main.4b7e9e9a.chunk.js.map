{"version":3,"sources":["reportWebVitals.js","reducers/actions.js","reducers/solvableChecker.js","reducers/tileset-functions.js","game-configs.js","reducers/tile-game-reducer.js","reducers/thunks.js","views/EnterNameView.js","views/LeaderBoardView.js","views/GameStatusView.js","views/TileView.js","views/PuzzleView.js","constants.js","views/FullImageView.js","views/GameHeaderView.js","views/RestartButtonsView.js","views/GameView.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INIT_GAME","MOVE_TILE","HIGHSCORE_LIST_LOADED","NAME_CHANGED","HIGHSCORE_LIST_SAVED","initGame","gameId","imageNumber","doShuffling","type","isSolvable","size","idArray","invCount","i","j","getInvCount","blankTileIdx","findIndex","t","row","Math","floor","findBlankRowPositionFromBottom","generateTileSet","newTilesArray","solvable","shuffle","swapTilesInSet","tiles","sourceId","destId","sourceIdx","source","destIdx","dest","allTilesAreAligned","length","hasEmptyTileOnSides","id","idx","col","getIndexInHighScoreList","newUserId","userTime","score","highScoreList","resultsCopy","results","map","r","time","isNaN","Date","parse","utcDateTime","push","sort","a","b","idxInHighScoreList","maxSize","gameConfigs","process","initialState","moves","gameComplete","undefined","gameName","highScorePosition","userName","userId","highScoreListSaved","tileGame","state","action","Object","assign","name","highScoreListId","highscorelistid","newTiles","setWithSwappedTiles","uuidv4","now","fetchHighScoreList","dispatch","getState","url","get","result","console","error","updateHighScoreList","body","post","getUrl","fetch","headers","ApiKey","response","ok","Error","json","method","JSON","stringify","EnterNameView","connect","onSubmitNameToHighScore","onNameChanged","nameChanged","props","useState","setUserName","minLength","maxLength","required","onChange","event","target","value","className","onClick","LeaderBoardView","rows","toLocaleDateString","unit","GameStatusView","getStyleForTile","tileWidth","isCorrectPos","top","left","imPath","window","location","href","style","backgroundPosition","backgroundImage","outline","outlineOffset","TileView","PuzzleView","onTileClicked","moveTile","tileWrapperStyle","width","tileContainerStyle","gridTemplateColumns","FullImageView","fullImageWidth","fullImageStyle","maxWidth","maxHeight","src","draggable","alt","GameHeaderView","RestartButtonsView","onInitGame","GameView","random","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b7e9e9a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","export const INIT_GAME = 'INIT_GAME';\nexport const MOVE_TILE = 'MOVE_TILE';\nexport const HIGHSCORE_LIST_LOADED = 'HIGHSCORE_LIST_LOADED';\nexport const NAME_CHANGED = 'NAME_CHANGED';\nexport const HIGHSCORE_LIST_SAVED = 'HIGHSCORE_LIST_SAVED';\n\nexport function initGame(gameId, imageNumber, doShuffling) {\n    return { type: INIT_GAME, gameId, imageNumber, doShuffling };\n}\n\nexport function moveTile(id) {\n    return { type: MOVE_TILE, id };\n}\n\nexport function highScoreListLoaded(highScoreList) {\n    return { type: HIGHSCORE_LIST_LOADED, highScoreList };\n}\n\nexport function nameChanged(name) {\n    return { type: NAME_CHANGED, name };\n}\n\nexport function highScoreListSaved(highScoreList) {\n    return { type: HIGHSCORE_LIST_SAVED, highScoreList };\n}","//\n// from https://www.geeksforgeeks.org/check-instance-15-puzzle-solvable/\n//\n\nexport function isSolvable(size, idArray) {\n    //\n    // Checks if an array of length size * size\n    // representing an two-dimensional matrix with width and height size\n    // is solvable as a sliding puzzle.\n    // An item value of 0 represents the blank tile\n    // The other items in the array are filled with distinct values\n    // 1...size*size-1\n    //\n    let invCount = getInvCount(size, idArray);\n\n    if (size & 1) {\n        // If size is odd, puzzle is solvable if inversion\n        // count is even.\n        return !(invCount & 1);\n    } else {\n        // If size is even, the puzzle is solvable if\n        //   - inversion count is odd and the blank tile appears on an even row counting from bottom\n        //   - inversion count is even and the blank tile appears on an odd row counting from bottom\n        let rowFromBottom = findBlankRowPositionFromBottom(size, idArray);\n        if (rowFromBottom & 1)\n            return !(invCount & 1);\n        else\n            return invCount & 1;\n    }\n}\n\nfunction getInvCount(size, idArray) {\n    //\n    // Count number of inversions in the array,\n    // i.e. how many pairs (array[i], array[j]) exist\n    // for j > i where array[i] > array[j]\n    //\n    let invCount = 0;\n    for (let i = 0; i < size * size - 1; i++) {\n        for (let j = i + 1; j < size * size; j++) {\n            if (idArray[j] && idArray[i] && (idArray[i] > idArray[j])) {\n                invCount++;\n            }\n        }\n    }\n    return invCount;\n}\n\nfunction findBlankRowPositionFromBottom(size, idArray) {\n    const blankTileIdx = idArray.findIndex(t => t === 0);\n    const row = Math.floor(blankTileIdx / size);\n    let rowFromBottom = size - row;\n    return rowFromBottom;\n}","import shuffle from 'shuffle-array';\nimport {\n    isSolvable\n} from './solvableChecker';\n\n//\n// The TileSet is an array of length size*size representing\n// a size*size matrix with unique values [0...(size*size -1)]\n// A tile value/id represents a slice of an image\n// When array[i] === i+1, the tile is correctly positioned in the matrix\n// The value 0 represents a blank tile\n// In the unshuffled TileSet, the blank tile is positioned in the lower\n// right corner\n//\n\nexport function generateTileSet(size, doShuffling) {\n    let newTilesArray = [];\n    for (let i = 0; i < size * size; i++) {\n        newTilesArray[i] = i + 1;\n    }\n    const blankTileIdx = size * size - 1;\n    newTilesArray[blankTileIdx] = 0;\n\n    if (doShuffling) {\n        let solvable = false;\n        while (!solvable) {\n            newTilesArray = shuffle(newTilesArray);\n            solvable = isSolvable(size, newTilesArray);\n        }\n    }\n    return newTilesArray;\n}\n\nexport function swapTilesInSet(tiles, sourceId, destId) {\n    let sourceIdx = tiles.findIndex(t => t === sourceId);\n    let source = tiles[sourceIdx];\n    let destIdx = tiles.findIndex(t => t === destId);\n    let dest = tiles[destIdx];\n    tiles[destIdx] = source;\n    tiles[sourceIdx] = dest;\n    return tiles;\n}\n\nexport function allTilesAreAligned(tiles) {\n    for (let i = 0; i < tiles.length; i++) {\n        if (tiles[i] !== 0 && (tiles[i] !== (i + 1))) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function hasEmptyTileOnSides(size, id, tiles) {\n    const idx = tiles.findIndex(t => t === id);\n    const row = Math.floor(idx / size);\n    if (row < (size - 1)) {\n        // Check below\n        if (tiles[idx + size] === 0) {\n            return true;\n        }\n    }\n    if (row > 0) {\n        // Check above\n        if (tiles[idx - size] === 0) {\n            return true;\n        }\n    }\n    const col = idx % size;\n\n    if (col < (size - 1)) {\n        // check to the right\n        if (tiles[idx + 1] === 0) {\n            return true;\n        }\n    }\n    if (col > 0) {\n        // check to the left\n        if (tiles[idx - 1] === 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function getIndexInHighScoreList(newUserId, userTime, score, highScoreList) {\n    const resultsCopy = highScoreList.results.map(r => {\n        return {\n            id: r.id,\n            score: r.score,\n            time: isNaN(Date.parse(r.utcDateTime)) ? 0 : Date.parse(r.utcDateTime)\n        }\n    });\n    resultsCopy.push({\n        id: newUserId,\n        score,\n        time: userTime\n    });\n    resultsCopy.sort((a, b) => (a.score - b.score) || (b.time - a.time));\n\n    let idxInHighScoreList = resultsCopy.findIndex(r => r.id === newUserId);\n    if (idxInHighScoreList > -1 && (idxInHighScoreList + 1 <= highScoreList.maxSize)) {\n        return idxInHighScoreList;\n    } else {\n        return -1;\n    }\n}","export const gameConfigs = [\n    {\n        'name': '3x3 Puzzle',\n        'size': 3,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_3x3\n    },\n    {\n        'name': '4x4 Puzzle',\n        'size': 4,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_4x4\n    },\n    {\n        'name': '5x5 Puzzle',\n        'size': 5,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_5x5\n    }\n]\n","import {\n    INIT_GAME,\n    MOVE_TILE,\n    HIGHSCORE_LIST_LOADED,\n    NAME_CHANGED,\n    HIGHSCORE_LIST_SAVED\n} from './actions';\nimport {\n    generateTileSet,\n    swapTilesInSet,\n    allTilesAreAligned,\n    hasEmptyTileOnSides,\n    getIndexInHighScoreList\n} from './tileset-functions';\nimport { gameConfigs } from '../game-configs';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst initialState = {\n    moves: 0,\n    gameComplete: false,\n    imageNumber: 1,\n    tiles: [],\n    size: undefined,\n    gameId: undefined,\n    gameName: undefined,\n    highScoreList: undefined,\n    highScorePosition: -1,\n    userName: undefined,\n    userId: undefined,\n    highScoreListSaved: false\n};\n\n\n// The reducer for the game\n// The state is an object with game state and an array of tiles\n// A tile is a number 1-N and the blank tile is represented by 0\nfunction tileGame(state = initialState, action) {\n    switch (action.type) {\n        case INIT_GAME: {\n            return Object.assign({}, initialState, {\n                gameId: action.gameId,\n                size: gameConfigs[action.gameId].size,\n                gameName: gameConfigs[action.gameId].name,\n                imageNumber: action.imageNumber,\n                highScoreListId: gameConfigs[action.gameId].highscorelistid,\n                tiles: generateTileSet(gameConfigs[action.gameId].size, action.doShuffling)\n            });\n        }\n\n        case MOVE_TILE: {\n            if (action.id === 0) {\n                // selected blank tile\n                return state;\n            }\n            if (state.gameComplete) {\n                return state;\n            }\n            if (action.id < 0 || action.id > (state.size * state.size - 1)) {\n                return state;\n            }\n\n            if (!hasEmptyTileOnSides(state.size, action.id, state.tiles)) {\n                return state;\n            }\n\n            //\n            // Move the tile\n            //\n            const newTiles = state.tiles.map(t => t);\n            const setWithSwappedTiles = swapTilesInSet(newTiles, 0, action.id);\n\n            //\n            // Check result\n            //\n            let gameComplete = allTilesAreAligned(setWithSwappedTiles);\n            if (gameComplete && state.highScoreList) {\n                const newUserId = uuidv4();\n                const time = Date.now();\n                const idxInHighScoreList = getIndexInHighScoreList(newUserId, time, state.moves + 1, state.highScoreList);\n                if (idxInHighScoreList > -1) {\n                    // User made it into the leaderboard\n                    return Object.assign({}, state, {\n                        highScorePosition: idxInHighScoreList + 1,\n                        gameComplete: gameComplete,\n                        moves: state.moves + 1,\n                        userId: newUserId,\n                        tiles: setWithSwappedTiles\n                    });\n                } else {\n                    // User dit not make it into the leaderboard\n                    return Object.assign({}, state, {\n                        highScorePosition: idxInHighScoreList + 1,\n                        gameComplete: gameComplete,\n                        moves: state.moves + 1,\n                        tiles: setWithSwappedTiles\n                    });\n                }\n            }\n            return Object.assign({}, state, {\n                gameComplete,\n                moves: state.moves + 1,\n                tiles: setWithSwappedTiles\n            });\n        }\n\n        case HIGHSCORE_LIST_LOADED: {\n            return Object.assign({}, state, {\n                highScoreList: action.highScoreList\n            });\n        }\n        case NAME_CHANGED: {\n            return Object.assign({}, state, {\n                userName: action.name\n            });\n        }\n        case HIGHSCORE_LIST_SAVED: {\n            return Object.assign({}, state, {\n                highScoreListSaved: true,\n                highScoreList: action.highScoreList\n            });\n        }\n        default:\n            return state;\n    }\n}\n\nexport default tileGame;","import {\n    HIGHSCORE_LIST_LOADED,\n    HIGHSCORE_LIST_SAVED\n} from './actions';\n\nexport async function fetchHighScoreList(dispatch, getState) {\n    if (process.env.REACT_APP_APIURL.length === 0) {\n        return;\n    }\n    let url = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}`;\n    try {\n        let result = await get(url);\n        dispatch({\n            type: HIGHSCORE_LIST_LOADED,\n            highScoreList: result\n        });\n    } catch (e) {\n        console.error('Network request failed');\n    }\n}\n\nexport async function updateHighScoreList(dispatch, getState) {\n    if (process.env.REACT_APP_APIURL.length === 0) {\n        return;\n    }\n\n    let url = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}/game-results`;\n\n    var state = getState();\n\n    if (!state.userName || state.userName.length === 0) {\n        return;\n    }\n\n    let body = {\n        userName: state.userName,\n        score: state.moves,\n        id: state.userId\n    };\n\n    try {\n        await post(url, body);\n    } catch (e) {\n        console.error('Network request failed3');\n        return;\n    }\n\n    let getUrl = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}`;\n    let result = await get(getUrl);\n\n    dispatch({\n        type: HIGHSCORE_LIST_SAVED, highScoreList: result\n    });\n}\n\nasync function get(url) {\n    try {\n        let response = await fetch(url, {\n            headers: {\n                ApiKey: `${process.env.REACT_APP_APIKEY}`\n            }\n        });\n        if (!response.ok) {\n            throw Error('Network request failed');\n        }\n        return await response.json();\n    } catch (e) {\n        throw Error('Network request failed');\n    }\n}\n\nasync function post(url, body) {\n    try {\n        let response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                ApiKey: `${process.env.REACT_APP_APIKEY}`\n            },\n            body: JSON.stringify(body),\n        });\n        if (!response.ok) {\n            throw Error('Network request failed');\n        }\n    } catch (e) {\n        throw Error('Network request failed');\n    }\n}\n\n","\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux'\nimport { nameChanged } from '../reducers/actions';\nimport { updateHighScoreList } from '../reducers/thunks';\nimport PropTypes from 'prop-types';\n\nconst EnterName = props => {\n\n    const [userName, setUserName] = useState('');\n\n    return <>\n        <div>\n            YOU MADE IT TO #{props.highScorePosition} on the leaderboard!\n        </div>\n        Enter your name:\n        <input\n            type='text'\n            minLength='3' maxLength='25'\n            required\n            onChange={(event) => {\n                setUserName(event.target.value);\n                props.onNameChanged(event.target.value);\n            }}\n        />\n        <div>\n            {userName.length >= 3 && userName.length <= 25 &&\n                <button className='game-button' onClick={() => props.onSubmitNameToHighScore(userName)}>Submit</button>\n            }\n        </div>\n    </>;\n}\n\nEnterName.propTypes = {\n    highScorePosition: PropTypes.number,\n    onNameChanged: PropTypes.func,\n    onSubmitNameToHighScore: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n    return {\n        highScorePosition: state.highScorePosition,\n        highScoreList: state.highScoreList,\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSubmitNameToHighScore: () => {\n            dispatch(updateHighScoreList);\n        },\n        onNameChanged: (name) => {\n            dispatch(nameChanged(name));\n        }\n    }\n}\n\nconst EnterNameView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EnterName)\n\nexport default EnterNameView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LeaderBoardView = (props) => {\n    if (!props.highScoreList) return <></>;\n    const rows = props.highScoreList.results.map((r, idx) => {\n        let className = '';\n        if (props.userId && r.id === props.userId) {\n            className = 'user-row-in-highscore';\n        }\n        return <tr className={className} key={idx + 1}>\n            <td>#{idx + 1}</td\n            ><td>{r.userName}</td>\n            <td className='date-column'>{(new Date(r.utcDateTime)).toLocaleDateString()}</td>\n            <td>{r.score}</td></tr>;\n    });\n    return <>\n        <div>\n            <h3>{props.highScoreList.name}</h3>\n            <table className=\"highscoretable\">\n                <thead>\n                    <tr>\n                        <th>Position</th>\n                        <th>Name</th>\n                        <th className='date-column'>Date</th>\n                        <th>{props.highScoreList.unit}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </table>\n        </div>\n    </>;\n}\n\nLeaderBoardView.propTypes = {\n    highScoreList: PropTypes.object,\n    name: PropTypes.string,\n    unit: PropTypes.string,\n    userId: PropTypes.string\n};\n\nexport default LeaderBoardView;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport EnterNameView from './EnterNameView';\nimport LeaderBoardView from './LeaderBoardView';\n\nconst GameStatus = (props) => {\n    if (props.gameComplete) {\n        return (\n            <div className=\"game-status\">\n                <div>\n                    <b>GAME COMPLETE!</b>\n                </div>\n                <div>You used {props.moves} moves</div>\n                {props.highScorePosition > 0 && !props.highScoreListSaved && (\n                    <EnterNameView />\n                )}\n                {props.highScorePosition > 0 && props.highScoreListSaved && (\n                    <LeaderBoardView\n                        highScoreList={props.highScoreList}\n                        userId={props.userId}\n                    />\n                )}\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"game-status\">\n                Moves: <b>{props.moves}</b>\n                <div className=\"game-instructions\">\n                    <div>Click on the tile that should be moved</div>\n                </div>\n            </div>\n        );\n    }\n};\n\nGameStatus.propTypes = {\n    moves: PropTypes.number,\n    gameComplete: PropTypes.bool,\n    highScorePosition: PropTypes.number,\n    highScoreListSaved: PropTypes.bool,\n    highScoreList: PropTypes.object,\n    userId: PropTypes.string,\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        moves: state.moves,\n        gameComplete: state.gameComplete,\n        highScorePosition: state.highScorePosition,\n        highScoreListSaved: state.highScoreListSaved,\n        highScoreList: state.highScoreList,\n        userId: state.userId\n    };\n};\n\nconst GameStatusView = connect(mapStateToProps)(GameStatus);\n\nexport default GameStatusView;\n","import React from 'react';\nimport './Game.css';\nimport PropTypes from 'prop-types';\n\nconst TileView = ({ id, size, tileWidth, isCorrectPos, imageNumber, onClick }) =>\n    <div className='tile'\n        style={getStyleForTile(id, size, tileWidth, isCorrectPos, imageNumber)}\n        onClick={() => onClick(id)}\n    />;\n\nTileView.propTypes = {\n    id: PropTypes.number,\n    size: PropTypes.number,\n    tileWidth: PropTypes.number,\n    isCorrectPos: PropTypes.bool,\n    imageNumber: PropTypes.number,\n    onClick: PropTypes.func\n};\n\nconst getStyleForTile = (id, size, tileWidth, isCorrectPos, imageNumber) => {\n    //\n    // Position a section of a background image in the tile\n    // based on the id of the tile\n    //\n    if (id === 0) {\n        // This is the blank tile\n        // Show no image\n        return {};\n    }\n\n    const idx = id - 1;\n    const top = -(Math.floor(idx / size)) * tileWidth;\n    const left = idx < size ? -idx * tileWidth : -(idx % size) * tileWidth;\n\n    const imPath = `${window.location.href}/images/img${imageNumber}.jpg`;\n    let style = {\n        backgroundPosition: `left ${left}px top ${top}px`,\n        backgroundImage: `url('${imPath}')`,\n    }\n\n    if (isCorrectPos) {\n        // Use a special style as a hint on that the tile is on\n        // the correct position\n        style = {\n            ...style,\n            outline: '1px solid white',\n            outlineOffset: '-10px',\n        }\n    }\n\n    return style;\n}\n\nexport default TileView;\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { PuzzleWidth } from '../constants';\nimport TileView from './TileView'\nimport { moveTile } from '../reducers/actions';\nimport PropTypes from 'prop-types';\n\nconst Puzzle = (props) => {\n    const tileWidth = PuzzleWidth / props.size;\n    const tileWrapperStyle = {\n        width: `${props.size * tileWidth}px`\n    }\n    const tileContainerStyle = {\n        gridTemplateColumns: `repeat(${props.size},${tileWidth}px)`\n    }\n\n    return (\n        <div className='tile-wrapper' style={tileWrapperStyle}>\n            <div className='tile-container' style={tileContainerStyle}>\n                {\n                    props.tiles.map((t, idx) =>\n                        <TileView key={idx}\n                            id={t}\n                            isCorrectPos={t === (idx + 1)}\n                            imageNumber={props.imageNumber}\n                            onClick={props.onTileClicked}\n                            tileWidth={tileWidth}\n                            size={props.size}\n                        />)\n                }\n            </div>\n        </div>\n    );\n}\n\nPuzzle.propTypes = {\n    onTileClicked: PropTypes.func,\n    size: PropTypes.number,\n    tiles: PropTypes.array,\n    imageNumber: PropTypes.number\n};\n\nconst mapStateToProps = state => {\n    return {\n        imageNumber: state.imageNumber,\n        tiles: state.tiles,\n        size: state.size,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTileClicked: id => {\n            dispatch(moveTile(id));\n        }\n    }\n}\n\nconst PuzzleView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Puzzle)\n\nexport default PuzzleView;\n","export const PuzzleWidth = 300;\nexport const NumImages = 18;\nexport const GameId_3x3 = 0;\nexport const GameId_4x4 = 1;\nexport const GameId_5x5 = 2;\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { PuzzleWidth } from '../constants';\nimport PropTypes from 'prop-types';\n\nconst FullImage = (props) => {\n    const imPath = `${window.location.href}/images/img${props.imageNumber}.jpg`;\n    const tileWidth = PuzzleWidth / props.size;\n    const fullImageWidth = props.size * tileWidth;\n    let fullImageStyle = {\n        maxWidth: fullImageWidth + 'px',\n        maxHeight: fullImageWidth + 'px'\n    }\n\n    return (\n        <div className=\"full-image\" style={fullImageStyle}>\n            <img src={`${imPath}`} draggable='false' alt='Full image' />\n        </div>\n    );\n}\n\nFullImage.propTypes = {\n    size: PropTypes.number,\n    imageNumber: PropTypes.number,\n};\n\nconst mapStateToProps = state => {\n    return {\n        imageNumber: state.imageNumber,\n    }\n}\n\nconst FullImageView = connect(\n    mapStateToProps\n)(FullImage)\n\nexport default FullImageView;","import React from 'react';\nimport './Game.css';\nimport PropTypes from 'prop-types';\n\nconst GameHeaderView = (props) =>\n    <>\n        <header className='game-header'>\n            <div className='game-title'>Sliding Image Puzzle</div>\n        </header>\n        <div><h2>{props.gameName}</h2></div>\n    </>;\n\nGameHeaderView.propTypes = {\n    gameName: PropTypes.string,\n};\n\nexport default GameHeaderView;\n","import React from 'react';\nimport './Game.css';\nimport { GameId_3x3, GameId_4x4, GameId_5x5 } from '../constants';\nimport PropTypes from 'prop-types';\n\nconst RestartButtonsView = (props) =>\n    <>\n        <button className='game-button' onClick={() => props.onInitGame(GameId_3x3)}>Restart 3x3</button>\n        <button className='game-button' onClick={() => props.onInitGame(GameId_4x4)}>Restart 4x4</button>\n        <button className='game-button' onClick={() => props.onInitGame(GameId_5x5)}>Restart 5x5</button>\n    </>;\n\nRestartButtonsView.propTypes = {\n    onInitGame: PropTypes.func\n};\n\nexport default RestartButtonsView;\n","import React from 'react';\nimport './Game.css';\nimport { connect } from 'react-redux'\nimport { initGame } from '../reducers/actions';\nimport GameStatusView from './GameStatusView';\nimport { NumImages } from '../constants';\nimport { fetchHighScoreList } from '../reducers/thunks';\nimport PuzzleView from './PuzzleView';\nimport FullImageView from './FullImageView';\nimport PropTypes from 'prop-types';\nimport LeaderBoardView from './LeaderBoardView';\nimport GameHeaderView from './GameHeaderView';\nimport RestartButtonsView from './RestartButtonsView';\n\nconst Game = (props) => {\n    return (\n        <div className='game'>\n            <GameHeaderView gameName={props.gameName} />\n            <GameStatusView />\n            <PuzzleView />\n            <RestartButtonsView onInitGame={props.onInitGame} />\n            <FullImageView />\n            <LeaderBoardView highScoreList={props.highScoreList} />\n        </div>\n    );\n};\n\nGame.propTypes = {\n    gameName: PropTypes.string,\n    highScoreList: PropTypes.object,\n    onInitGame: PropTypes.func\n};\n\n\nconst mapStateToProps = state => {\n    return {\n        gameName: state.gameName,\n        highScoreList: state.highScoreList\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onInitGame: (gameId) => {\n            dispatch(initGame(gameId, Math.floor(Math.random() * NumImages) + 1, true));\n            dispatch(fetchHighScoreList);\n        }\n    }\n}\n\nconst GameView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Game)\n\nexport default GameView;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport tileGame from './reducers/tile-game-reducer';\nimport { fetchHighScoreList } from './reducers/thunks'\nimport { initGame } from './reducers/actions';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { GameId_3x3, NumImages } from './constants';\nimport GameView from './views/GameView';\n\n// For integration with Redux DevTools in browser\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(tileGame, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nstore.dispatch(initGame(GameId_3x3, Math.floor(Math.random() * NumImages) + 1, true));\nstore.dispatch(fetchHighScoreList);\nReactDOM.render(\n    <Provider store={store}>\n        <GameView />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}